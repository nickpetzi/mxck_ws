 8 changes: 4 additions & 4 deletions8  
src/mxck_run/CMakeLists.txt
Original file line number	Diff line number	Diff line change
@@ -160,10 +160,10 @@ include_directories(

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
catkin_install_python(PROGRAMS 
  scripts/launch_server.py
  DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)
# catkin_install_python(PROGRAMS 
#   scripts/yourprogramm.py
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )


## Mark executables for installation
 7 changes: 0 additions & 7 deletions7  
src/mxck_run/launch/launch_server.launch
Original file line number	Diff line number	Diff line change
@@ -1,7 +0,0 @@
<launch>

  <node pkg="mxck_run" name="launch_server" type="launch_server.py" output="screen"/>

</launch>


  6 changes: 0 additions & 6 deletions6  
src/mxck_run/launch/mxck_run.launch
Original file line number	Diff line number	Diff line change
@@ -10,7 +10,6 @@
  <arg name="run_rs_imu" default="false" /> <!--publish realsense imu-->
  <arg name="run_foxglove" default="false" /> <!--stream data using foxglove-->
  <arg name="run_lights" default="false" /> <!--turn lights on-->
  <arg name="run_server" default="false" /> <!--launch nodes using foxglove-->

   <!--ports-->
  <arg name="joy_port" value="/dev/input/js0" />
@@ -120,11 +119,6 @@
      <arg name="topic_whitelist" value="$(arg whitelist)" />
    </include>
  </group>

  <!--launch server-->
  <group if="$(arg run_server)">
    <node pkg="mxck_run" name="launch_server" type="launch_server.py" output="screen"/>
  </group>


</launch>
 88 changes: 0 additions & 88 deletions88  
src/mxck_run/scripts/launch_server.py
Original file line number	Diff line number	Diff line change
@@ -1,88 +0,0 @@
#!/usr/bin/env python

import roslib
roslib.load_manifest('mxck_run')

import sys

from mxck_run.srv import *
import rospy
import signal
from subprocess import Popen, PIPE
import os

class LaunchServer():
    def __init__(self):
        self.PID = None
        self.process = None
        self.cmds = ['rosrun', 'roslaunch', 'kill']

        self.status = {
            'run_camera': False,
            'run_motors': False,
            'run_lidar': False,
            'run_micro': False,
            'run_pdc': False,
            'run_imu': False,
            'run_foxglove': False,
            'run_lights': False,
        }

        self.output = []

    def execute(self, mode, package, filename, args):


        cmd = [mode, package, filename, args]

        msg = "Running: %s" % " ".join(cmd)
        print(msg)

        self.process = Popen(cmd, shell=False, preexec_fn=os.setsid, stdout=PIPE, stderr=PIPE)

        self.PID = os.getpgid(self.process.pid)

        self.output.append("[%d]: %s" %(self.PID, msg))

        print(self.PID)

    def terminate(self, pid):

        print("Terminating process...")

        os.killpg(os.getpgid(pid), signal.SIGTERM)

        for i, s in enumerate(self.output):
            if str(pid) in s:
                self.output.pop(i)
                break


    def callback(self, request):
        cmd = request.command
        pkg = request.package
        fname = request.filename
        args = request.args
        pid = request.pid



        if cmd in ['rosrun', 'roslaunch', 'rosbag']:
            self.execute(cmd, pkg, fname, args)
        elif cmd == 'kill':
            self.terminate(pid)


        return RemoteRunResponse(self.output)


if __name__ == "__main__":
    rospy.init_node('launch_service')

    ls = LaunchServer()
    service = rospy.Service('launch_node', RemoteRun, ls.callback)

    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")

